@page "/"
@using Stimulsoft.Base
@using Stimulsoft.Report
@using Stimulsoft.Report.Blazor
@using Stimulsoft.Report.Web
@using Stimulsoft.Dashboard
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div align="center">
    <button @onclick="ExportDashboardAsHTML">Export as HTML</button> &nbsp; <button @onclick="ExportDashboardAsPDF">Export as PDF</button> &nbsp; <button @onclick="PrintDashboard">Print</button>
    <br /><br />
    <input id="responseAsFile" type="checkbox" @bind="responseAsFile"><label for="responseAsFile">Response as File</label>
    <br /><br />
    <p>@message</p>
</div>

@code
{
    private bool responseAsFile;

    private MarkupString message;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        //How to activate
        //Stimulsoft.Base.StiLicense.Key = "6vJhGtLLLz2GNviWmUTrhSqnO...";
        //var licenseStream = await Http.GetStreamAsync("Secret/license.key");
        //Stimulsoft.Base.StiLicense.LoadFromStream(licenseStream);

        // Initialize JSRuntime service
        StiBlazorHelper.Initialize(JSRuntime);
    }

    private async Task ExportDashboardAsHTML()
    {
        // Create empty dashboard object
        var report = StiReport.CreateNewDashboard();

        // Load dashboard template
        var reportBytes = await Http.GetByteArrayAsync("Dashboards/DashboardChristmas.mrt");
        report.Load(reportBytes);

        // Render, without showing progress
        report.Render(false);

        if (responseAsFile)
        {
            // Response as HMTL file
            StiReportResponse.ResponseAsHtml(report);

            message = new MarkupString("Export to HTML is completed.");
        }
        else
        {
            // Export to HTML file
            var _exportFilePath = $"Dashboards/ChristmasDashboard_{DateTime.Now.ToString("yyyy-dd-MM_HH-mm-ss")}.html";
            report.ExportDocument(Stimulsoft.Report.StiExportFormat.Html, _exportFilePath);

            message = new MarkupString("The exported dashboard is saved to a file: <br />" + _exportFilePath);
        }
    }

    private async Task ExportDashboardAsPDF()
    {
        // Create empty dashboard object
        var report = StiReport.CreateNewDashboard();

        // Load dashboard template
        var reportBytes = await Http.GetByteArrayAsync("Dashboards/DashboardChristmas.mrt");
        report.Load(reportBytes);

        // Render, without showing progress
        report.Render(false);

        if (responseAsFile)
        {
            // Response as PDF file
            StiReportResponse.ResponseAsPdf(report);

            message = new MarkupString("Export to PDF is completed.");
        }
        else
        {
            // Export to PDF file
            var _exportFilePath = $"Dashboards/ChristmasDashboard_{DateTime.Now.ToString("yyyy-dd-MM_HH-mm-ss")}.pdf";
            report.ExportDocument(Stimulsoft.Report.StiExportFormat.Pdf, _exportFilePath);

            message = new MarkupString("The exported dashboard is saved to a file: <br />" + _exportFilePath);
        }
    }
    
    private async Task PrintDashboard()
    {
        // Create empty dashboard object
        var report = StiReport.CreateNewDashboard();

        // Load dashboard template
        var reportBytes = await Http.GetByteArrayAsync("Dashboards/DashboardChristmas.mrt");
        report.Load(reportBytes);

        // Render, w/out showing progress
        report.Render(false);

        // Print dashboard
        StiReportResponse.PrintAsPdf(report);

        message = new MarkupString("The dashboard printed");
    }
}